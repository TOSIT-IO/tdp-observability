# Copyright 2022 TOSIT.IO
# SPDX-License-Identifier: Apache-2.0

---
# Prometheus version
prometheus_version: 2.37.6
prometheus_release: "prometheus-{{ prometheus_version }}.linux-amd64"
prometheus_dist_file: "{{ prometheus_release }}.tar.gz"

# Prometheus installation directory
prometheus_root_dir: /opt/tdp_observability
prometheus_install_dir: "{{ prometheus_root_dir }}/prometheus"
# _prometheus_binary_install_dir is used inside cloudalchemy.prometheus
# but with "tdp_vars" we can not override it
prometheus_binary_install_dir: "/usr/local/bin"

# Skip cloudalchemy.prometheus install, we perform air-gap installation ourself
prometheus_skip_install: true

# Prometheus configuration directories
prometheus_config_dir: /etc/prometheus
prometheus_certs_dir: "{{ prometheus_config_dir }}/certs"
prometheus_static_targets_dir: "{{ prometheus_config_dir }}/file_sd"

# Prometheus data directory
prometheus_db_dir: /var/lib/prometheus

# Selinux packages are not needed, prometheus is unconfined
prometheus_selinux_packages: []

# Prometheus web configuration
prometheus_web_listen_address: "0.0.0.0:{{ prometheus_web_port }}"
prometheus_web_config:
  tls_server_config:
    cert_file: "{{ prometheus_certs_dir }}/{{ ansible_fqdn }}.pem"
    key_file: "{{ prometheus_certs_dir }}/{{ ansible_fqdn }}.key"
  basic_auth_users:
    "{{ prometheus_admin_user }}": "{{ prometheus_admin_password | password_hash('blowfish') }}"

# Prometheus targets to generate from TDP components Ansible groups
prometheus_tdp_targets:
  exporter_node:
    component: exporter_node
    group: exporter_node
    port: "{{ exporter_node_http_port }}"
    service: node
  exporter_postgres:
    component: exporter_postgres
    group: exporter_postgres
    port: "{{ exporter_postgres_http_port }}"
    service: node
  zk_server:
    component: zk_server
    group: zk
    port: "{{ exporter_zookeeper_server_http_port }}"
    service: ZooKeeper
  hdfs_nn:
    component: hdfs_nn
    group: hdfs_nn
    port: "{{ exporter_hdfs_nn_http_port }}"
    service: HDFS
  hdfs_zkfc:
    component: hdfs_zkfc
    group: hdfs_nn
    port: "{{ exporter_hdfs_zkfc_http_port }}"
    service: HDFS
  hdfs_dn:
    component: hdfs_dn
    group: hdfs_dn
    port: "{{ exporter_hdfs_dn_http_port }}"
    service: HDFS
  hdfs_jn:
    component: hdfs_jn
    group: hdfs_jn
    port: "{{ exporter_hdfs_jn_http_port }}"
    service: HDFS
  yarn_rm:
    component: yarn_rm
    group: yarn_rm
    port: "{{ exporter_yarn_rm_http_port }}"
    service: YARN
  yarn_nm:
    component: yarn_nm
    group: yarn_nm
    port: "{{ exporter_yarn_nm_http_port }}"
    service: YARN
  yarn_ats:
    component: yarn_ats
    group: yarn_ats
    port: "{{ exporter_yarn_ats_http_port }}"
    service: YARN
  mapred_jhs:
    component: mapred_jhs
    group: mapred_jhs
    port: "{{ exporter_mapred_jhs_http_port }}"
    service: YARN
  hbase_master:
    component: hbase_master
    group: hbase_master
    port: "{{ exporter_hbase_hm_http_port }}"
    service: HBase
  hbase_rs:
    component: hbase_rs
    group: hbase_rs
    port: "{{ exporter_hbase_hrs_http_port }}"
    service: HBase
  hbase_rest:
    component: hbase_rest
    group: hbase_rest
    port: "{{ exporter_hbase_hr_http_port }}"
    service: HBase
  phoenix_queryserver:
    component: phoenix_queryserver
    group: phoenix_queryserver_daemon
    port: "{{ exporter_hbase_pqs_http_port }}"
    service: HBase
  hive_ms:
    component: hive_ms
    group: hive_ms
    port: "{{ exporter_hive_hms_http_port }}"
    service: Hive
  hive_s2:
    component: hive_s2
    group: hive_s2
    port: "{{ exporter_hive_hs2_http_port }}"
    service: Hive
  ranger_admin:
    component: ranger_admin
    group: ranger_admin
    port: "{{ exporter_ranger_ra_http_port }}"
    service: Ranger
  ranger_usersync:
    component: ranger_usersync
    group: ranger_usersync
    port: "{{ exporter_ranger_ru_http_port }}"
    service: Ranger
  ranger_kms:
    component: ranger_kms
    group: ranger_kms
    port: "{{ exporter_ranger_kms_http_port }}"
    service: Ranger
  knox_gateway:
    component: knox_gateway
    group: knox
    port: "{{ exporter_knox_gateway_http_port }}"
    service: Knox

# Prometheus scrape jobs
# Will be enriched with 1 job per component in 'prometheus_tdp_targets'
prometheus_scrape_configs:
  - job_name: prometheus
    static_configs:
      - targets:
          - "{{ ansible_fqdn }}:9090"
    scheme: https
    basic_auth:
      username: "{{ prometheus_admin_user }}"
      password: "{{ prometheus_admin_password }}"
    relabel_configs: "{{ prometheus_relabels }}"

# Relabel jobs
prometheus_relabels:
  # Relabeling of 'instance' from 'host:port' to 'host'
  - source_labels: ["__address__"]
    regex: "(.*):.*"
    target_label: "instance"
    replacement: "${1}"

# Prometheus service start on boot policies
prometheus_start_on_boot: false
