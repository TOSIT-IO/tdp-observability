# Copyright 2022 TOSIT.IO
# SPDX-License-Identifier: Apache-2.0

---
- name: Run preflight checks
  ansible.builtin.include_tasks:
    file: preflight.yml

- name: Ensure grafana's group exists # noqa var-naming[no-role-prefix]
  ansible.builtin.include_role:
    name: tosit.tdp.utils.group
  vars:
    group: "{{ grafana_group }}"

- name: Ensure grafana's user exists  # noqa var-naming[no-role-prefix]
  ansible.builtin.include_role:
    name: tosit.tdp.utils.user
  vars:
    user: "{{ grafana_user }}"
    group: "{{ grafana_group }}"

- name: Upload {{ grafana_dist_file }}
  ansible.builtin.copy:
    src: "{{ binaries_local_dir }}/{{ grafana_dist_file }}"
    dest: "{{ binaries_upload_dir }}/{{ grafana_dist_file }}"
    owner: root
    group: root
    mode: "644"
  diff: false

- name: "Ensure directory exists : {{ grafana_root_dir }}"
  ansible.builtin.file:
    path: "{{ grafana_root_dir }}"
    state: directory
    owner: root
    group: root
    mode: "755"

- name: Ensure grafana_release directory exists
  ansible.builtin.file:
    path: "{{ grafana_root_dir }}/{{ grafana_release }}"
    state: directory
    owner: root
    group: root
    mode: "755"

- name: Extract {{ grafana_dist_file }}
  ansible.builtin.unarchive:
    src: "{{ binaries_upload_dir }}/{{ grafana_dist_file }}"
    dest: "{{ grafana_root_dir }}/{{ grafana_release }}"
    owner: root
    group: root
    mode: "755"
    remote_src: true
    extra_opts: "--strip-components=1"

- name: Create symbolic link to Grafana installation
  ansible.builtin.file:
    src: "{{ grafana_root_dir }}/{{ grafana_release }}"
    dest: "{{ grafana_install_dir }}"
    state: link

- name: Symlink grafana binary
  ansible.builtin.file:
    src: "{{ grafana_install_dir }}/bin/grafana"
    dest: "{{ grafana_binary_install_dir }}/grafana"
    state: link

- name: Template grafana-server service file
  ansible.builtin.template:
    src: grafana-server.service.j2
    dest: /usr/lib/systemd/system/grafana-server.service
    group: root
    owner: root
    mode: "644"
  notify: systemctl daemon-reload
