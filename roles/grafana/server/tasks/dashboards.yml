# Copyright 2022 TOSIT.IO
# Copyright 2017-2018 Pawel Krupa, Roman Demachkovych
# SPDX-License-Identifier: Apache-2.0 AND MIT
# Copied and adapted from https://github.com/cloudalchemy/ansible-grafana.git
---
#
# Build list of installed tdp services
#
- name: "Build list of all <service>_<component> and ansible custom groups ('' when undefined)"
  ansible.builtin.set_fact:
    _component_keys: "{{ _component_keys | default([]) + _comp_keys }}"
    _custom_ansible_groups: "{{ _custom_ansible_groups | default([]) + _custom_groups }}"
    _service_components: "{{ _service_components | default([]) + _svce_components }}"
  loop: "{{ observability_tdp_targets | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  vars:
    # Build a list of <service_component>
    _components: "{{ observability_tdp_targets[item.key] | dict2items | rejectattr('key', 'in', ['unix_group', 'labels']) | list }}"
    _comp_keys: "{{ [item.key + '_'] | product(_components | map(attribute='key') | list) | map('join') | list }}"
    # build a list of custom groups
    _custom_groups: "{{ _components | map(attribute='value') | map(attribute='group', default='') }}"
    # build list of [ { service: service_component }, {service: service_component2} ]
    _svce_components: "{{ _comp_keys | map('community.general.dict_kv', item.key) }}"

- name: "Build a dictionary of <service>_<component>: service"
  ansible.builtin.set_fact:
    component_service: "{{ component_service | default({}) | combine({item[service]: service}) }}"
  loop: "{{ _service_components }}"
  vars:
    service: "{{ item.keys() | first }}"

- name: "Build a dictionary of <service>_<component>: ansible_group"
  ansible.builtin.set_fact:
    ansible_groups: "{{ ansible_groups | default({}) | combine({component: _ansible_group}) }}"
  loop: "{{ _component_keys }}"
  loop_control:
    index_var: idx
    loop_var: component
    label: "{{ component }}"
  vars:
    _custom_group: "{{ _custom_ansible_groups[idx] }}"
    _ansible_group: "{{ (_custom_group == '') | ternary(component, _custom_group) }}"

- name: "Build list of services used in this cluster"
  ansible.builtin.set_fact:
    installed_services: "{{ (installed_services | default([]) + [component_service[item]]) | unique }}"
  when: ansible_groups[item] in groups and groups[ansible_groups[item]] | length > 0
  loop: "{{ _component_keys }}"

- name: Install dashboards via provisionning
  when: grafana_use_provisioning
  block:
    - name: Create/Update dashboards file (provisioning)
      become: true
      ansible.builtin.copy:
        dest: "/etc/grafana/provisioning/dashboards/ansible.yml"
        content: |
          apiVersion: 1
          providers:
           - name: 'default'
             orgId: 1
             folder: ''
             type: file
             options:
               path: "{{ grafana_data_dir }}/dashboards"
               #foldersFromFilesStructure: true
        backup: false
        owner: root
        group: "{{ grafana_group }}"
        mode: "640"

    - name: Register previously copied dashboards
      ansible.builtin.find:
        paths: "{{ grafana_data_dir }}/dashboards"
        recurse: true
        hidden: true
        patterns:
          - "*.json"
      register: _dashboards_present
      when: grafana_provisioning_synced

    - name: Build list of dashboards to copy
      ansible.builtin.set_fact:
        _all_dashboards: "{{ _all_dashboards | default([]) + [{'src': item.src, 'path': item.path}] }}"
        _all_directories: "{{ _all_directories | default([]) + [_dir] }}"
      with_community.general.filetree: "{{ grafana_dashboards_dir | dict2items | map(attribute='value') | list }}"
      loop_control:
        label: "{{ item.path }}"
      vars:
        _dir: "{{ item.path | dirname() }}"
        _file: "{{ item.path | basename() }}"
        _re: "{{ grafana_filtered_dashboards[_dir] | default('(.*)') }}"
        _service: "{{ _file | regex_replace(_re, '\\1') }}"
      when: >
        item.path is match(".*[.]json") and
        ( _dir not in grafana_filtered_dashboards.keys() | default([]) or
          _service in installed_services
        )

    - name: Create remote directories
      ansible.builtin.file:
        path: "{{ grafana_data_dir }}/dashboards/{{ item }}"
        state: directory
        owner: "{{ grafana_user }}"
        group: "{{ grafana_group }}"
        mode: '0755'
      loop: "{{ _all_directories | unique }}"

    - name: Provision every dashboards in list
      become: true
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ grafana_data_dir }}/dashboards/{{ item.path }}"
        owner: "{{ grafana_user }}"
        group: "{{ grafana_group }}"
        mode: "640"
      loop: "{{ _all_dashboards }}"
      loop_control:
        label: "{{ item.path }}"

      register: _dashboards_copied

    - name: Get dashboard lists
      ansible.builtin.set_fact:
        _dashboards_present_list: "{{ _dashboards_present | json_query('files[*].path') | default([]) }}"
        _dashboards_copied_list: "{{ _dashboards_copied | json_query('results[*].dest') | default([]) }}"
      when: grafana_provisioning_synced

    - name: Remove dashboards not present on deployer machine (synchronize)
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items: "{{ _dashboards_present_list | difference(_dashboards_copied_list) }}"
      when: grafana_provisioning_synced
